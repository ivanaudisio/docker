<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.11.1">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.1.8">
      <jobProperties/>
      <triggers/>
      <parameters/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.36.1">
    <script>pipeline {
    environment {
        artifact = &quot;example.txt&quot;
        repository = &quot;alpha&quot;
        artifactId = &quot;myApp&quot;
        version = &quot;${BUILD_NUMBER}&quot;
        nexusProtocol = &quot;http&quot;
        nexusUrl = &quot;nexus:8081&quot;
        newRepository = &quot;beta&quot;
    }

    agent any
    stages {
        stage(&apos;Build artifact&apos;) {
            steps {
                sh &quot;touch ${artifact}&quot;
            }
        }
        stage(&apos;Tests&apos;) {
            steps {
                echo &apos;testing the artifact&apos;
            }
        }
        stage(&apos;Upload to Nexus (alpha)&apos;) {
            steps {
                sh &quot;curl -v -u admin:admin123 --upload-file ${artifact} ${nexusProtocol}://${nexusUrl}/repository/${repository}/${artifactId}/${version}/${artifact}&quot;
                // The following script requires the Nexus Artifact Uploader plugin
                // nexusArtifactUploader credentialsId: &apos;nexus-credentials&apos;,
                //   groupId: &apos;&apos;,
                //   nexusUrl: &quot;${nexusUrl}&quot;,
                //   nexusVersion: &apos;nexus3&apos;,
                //   protocol: &quot;${nexusProtocol}&quot;,
                //   repository: &quot;${repository}&quot;,
                //   version: &quot;${version}&quot;,
                //   artifacts: [[artifactId: &quot;${artifactId}&quot;, classifier: &apos;&apos;, file: &quot;${artifact}&quot;, type: &apos;&apos;]]
            }
        }
        stage(&apos;QA&apos;) {
            steps {
                input message: &apos;Passed QA?&apos;, ok: &apos;Passed Tests&apos;
            }
        }
        stage(&apos;Promote artifact to Beta&apos;) {
            steps {
                dir(&apos;promote&apos;) {
                    echo &quot;Downloading pre-alpha artifact&quot;
                    sh &quot;curl -X GET -u admin:admin123 ${nexusProtocol}://${nexusUrl}/repository/${repository}/${artifactId}/${version}/${artifact} -O&quot;
                    echo &quot;Uploading artifact to beta&quot;
                    sh &quot;curl -v -u admin:admin123 --upload-file ${artifact} ${nexusProtocol}://${nexusUrl}/repository/${newRepository}/${artifactId}/${version}/${artifact}&quot;
                    echo &quot;Removing artifact from Alpha&quot;
                    sh &quot;curl -v -u admin:admin123 -X DELETE ${artifact} ${nexusProtocol}://${nexusUrl}/repository/${repository}/${artifactId}/${version}/${artifact}&quot;
                }
            }
        }
    }

    post {
        // Always runs. And it runs before any of the other post conditions.
        always {
            // Let&apos;s wipe out the workspace before we finish!
            deleteDir()
        }

        success {
            echo &quot;Pipeline succeeded&quot;
            //   mail(from: &quot;bob@example.com&quot;,
            //       to: &quot;steve@example.com&quot;,
            //       subject: &quot;That build passed.&quot;,
            //       body: &quot;Nothing to see here&quot;)
        }

        failure {
            echo &quot;Pipeline Failed&quot;
            //   mail(from: &quot;bob@example.com&quot;,
            //       to: &quot;steve@example.com&quot;,
            //       subject: &quot;That build failed!&quot;,
            //       body: &quot;Nothing to see here&quot;)
        }
    }

    // The options directive is for configuration that applies to the whole job.
    options {
        // For example, we&apos;d like to make sure we only keep 10 builds at a time, so
        // we don&apos;t fill up our storage!
        buildDiscarder(logRotator(numToKeepStr:&apos;10&apos;))

        // And we&apos;d really like to be sure that this build doesn&apos;t hang forever, so
        // let&apos;s time it out after an hour.
        timeout(time: 60, unit: &apos;MINUTES&apos;)
    }

}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
